name: Capsailer CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Install Dependencies
      run: go mod download

    - name: Build
      run: |
        go build -v -o capsailer cmd/capsailer/main.go cmd/capsailer/commands.go
        chmod +x capsailer

    - name: Run Unit Tests
      run: go test -v ./...

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: capsailer-linux-amd64
        path: capsailer

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Install Dependencies
      run: go mod download

    - name: Build
      run: |
        go build -v -o capsailer cmd/capsailer/main.go cmd/capsailer/commands.go
        chmod +x capsailer

    - name: Set up KinD cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: "kind"
        version: "v0.20.0"

    - name: Create Test Manifest
      run: |
        cat > manifest.yaml << EOF
        images:
          - alpine:3.19.0
          - nginx:1.25.0
        charts:
          - name: nginx
            repo: https://charts.bitnami.com/bitnami
            version: 15.1.4
        EOF

    - name: Test Init Command
      run: |
        ./capsailer init --manifest manifest.yaml
        echo "Init command successful"

    - name: Test Build Command
      run: |
        ./capsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz
        echo "Build command successful"
        ls -la capsailer-bundle.tar.gz

    - name: Test Registry Deployment
      run: |
        ./capsailer registry --namespace capsailer-test
        echo "Registry deployment successful"
        kubectl get pods -n capsailer-test

    - name: Test Push Command
      run: |
        ./capsailer push --bundle capsailer-bundle.tar.gz --namespace capsailer-test
        echo "Push command successful"
        
        # Verify images in registry
        kubectl port-forward -n capsailer-test svc/registry 5000:5000 &
        sleep 5
        curl -s http://localhost:5000/v2/_catalog | tee catalog.json
        curl -s http://localhost:5000/v2/nginx/tags/list | tee tags.json
        
        # Verify charts in repository
        kubectl port-forward -n capsailer-test svc/chartmuseum 8080:8080 &
        sleep 5
        curl -s http://localhost:8080/api/charts | tee charts.json
        
        # Kill port forwards
        pkill -f "kubectl port-forward"

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Install golangci-lint
      run: |
        echo "Using built-in Go linting tools instead of golangci-lint"

    - name: Run linting
      run: |
        echo "Running go vet..."
        go vet ./...
        echo "Running go fmt..."
        go fmt ./...

  release:
    name: Release Binaries
    needs: [build, integration, lint]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            binary_name: capsailer
            asset_name: capsailer-linux-amd64
          - goos: linux
            goarch: arm64
            binary_name: capsailer
            asset_name: capsailer-linux-arm64
          - goos: darwin
            goarch: amd64
            binary_name: capsailer
            asset_name: capsailer-darwin-amd64
          - goos: darwin
            goarch: arm64
            binary_name: capsailer
            asset_name: capsailer-darwin-arm64
          - goos: windows
            goarch: amd64
            binary_name: capsailer.exe
            asset_name: capsailer-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true
      
      - name: Build Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -o ${{ matrix.binary_name }} cmd/capsailer/main.go cmd/capsailer/commands.go
      
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.binary_name }}
      
      - name: Compress Binary
        if: runner.os != 'Windows'
        run: tar -czvf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}

      - name: Compress Binary (Windows)
        if: runner.os == 'Windows'
        uses: vimtor/action-zip@v1.1
        with:
          files: ${{ matrix.binary_name }}
          dest: ${{ matrix.asset_name }}.zip

  publish:
    name: Publish GitHub Release
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
      
      - name: List Files
        run: find . -type f | sort
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/capsailer-*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true 