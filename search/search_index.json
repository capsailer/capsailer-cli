{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Capsailer","text":"<p>Capsailer is a CLI tool for delivering Kubernetes applications into air-gapped (offline) environments.</p>"},{"location":"#overview","title":"Overview","text":"<p>Capsailer allows you to define Helm charts and container images, package them into a portable archive, and deploy them into an air-gapped Kubernetes environment by installing a local registry and Helm chart server.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Download container images and Helm charts from public or private repositories</li> <li>Package everything into a single, portable archive file</li> <li>Deploy the bundle in an air-gapped environment</li> <li>Set up a local container registry and Helm chart repository</li> <li>Self-contained CLI that doesn't require Docker or skopeo for image operations</li> <li>Built-in support for pushing container images and Helm charts without external dependencies</li> <li>Automated chart repository deployment and publishing</li> </ul>"},{"location":"#how-it-works","title":"How It Works","text":"<p>Capsailer provides an all-in-one solution for air-gapped Kubernetes deployments:</p> <ol> <li>Bundle Creation: Package container images and Helm charts into a portable bundle</li> <li>Registry Infrastructure: Deploy a container registry and Helm chart repository</li> <li>Push Mechanism: Upload images and charts without requiring external tools like Docker or skopeo</li> </ol> <p>Unlike other solutions, Capsailer handles both container images and Helm charts natively, without relying on external tools in the air-gapped environment. </p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions to Capsailer are welcome! This page provides guidelines for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#fork-and-clone-the-repository","title":"Fork and Clone the Repository","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork: <pre><code>git clone https://github.com/capsailer/capsailer-cli.git\ncd capsailer-cli\n</code></pre></li> <li>Set up the development environment</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol>"},{"location":"contributing/#development-environment","title":"Development Environment","text":"<p>To set up a development environment:</p> <pre><code># Clone the repository\ngit clone https://github.com/capsailer/capsailer-cli.git\ncd capsailer\n\n# Install dependencies\ngo mod download\n\n# Build the binary\ngo build -o capsailer cmd/capsailer/main.go\n</code></pre>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>Please follow these code style guidelines:</p> <ul> <li>Use <code>gofmt</code> to format your code</li> <li>Write comments for exported functions and types</li> <li>Follow the Go Code Review Comments</li> <li>Add tests for new functionality</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Before submitting a pull request, make sure your changes pass all tests:</p> <pre><code>go test ./...\n</code></pre>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>When submitting a pull request:</p> <ol> <li>Make sure your code passes all tests</li> <li>Update documentation if necessary</li> <li>Add a clear description of the changes</li> <li>Reference any related issues</li> </ol>"},{"location":"contributing/#issues","title":"Issues","text":"<p>When reporting issues, please include:</p> <ul> <li>A clear description of the problem</li> <li>Steps to reproduce the issue</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Version information (Go version, OS, etc.)</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>Feature requests are welcome. Please provide:</p> <ul> <li>A clear description of the feature</li> <li>Use cases for the feature</li> <li>Any relevant examples or mockups</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Capsailer, you agree that your contributions will be licensed under the project's MIT License. </p>"},{"location":"examples/","title":"Examples","text":"<p>This page provides examples of common Capsailer usage scenarios.</p>"},{"location":"examples/#basic-bundle-creation","title":"Basic Bundle Creation","text":"<p>This example shows how to create a basic bundle with a few container images and Helm charts.</p>"},{"location":"examples/#manifest-file","title":"Manifest File","text":"<pre><code># manifest.yaml\nimages:\n  - nginx:1.25\n  - redis:7.0\n\ncharts:\n  - name: redis\n    repo: https://charts.bitnami.com/bitnami\n    version: 17.11.7\n  - name: nginx\n    repo: https://charts.bitnami.com/bitnami\n    version: 15.1.4\n</code></pre>"},{"location":"examples/#build-command","title":"Build Command","text":"<pre><code>capsailer init --manifest manifest.yaml\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz\n</code></pre>"},{"location":"examples/#deploying-a-registry-with-persistence","title":"Deploying a Registry with Persistence","text":"<p>This example shows how to deploy a registry with persistent storage.</p> <pre><code>capsailer registry --namespace my-registry --storage-class standard --storage-size 20Gi\n</code></pre>"},{"location":"examples/#pushing-images-to-an-external-registry","title":"Pushing Images to an External Registry","text":"<p>This example shows how to push images from a bundle to an external registry.</p> <pre><code>capsailer push --bundle capsailer-bundle.tar.gz --external-registry registry.example.com --username myuser --password mypassword\n</code></pre>"},{"location":"examples/#complete-air-gapped-workflow","title":"Complete Air-Gapped Workflow","text":"<p>This example shows the complete workflow for air-gapped deployments.</p>"},{"location":"examples/#in-the-connected-environment","title":"In the Connected Environment","text":"<pre><code># Create a manifest file\ncat &gt; manifest.yaml &lt;&lt; EOF\nimages:\n  - nginx:1.25\n  - redis:7.0\n  - bitnami/postgresql:15.4.0\n  - registry:2\n\ncharts:\n  - name: redis\n    repo: https://charts.bitnami.com/bitnami\n    version: 17.11.7\n  - name: nginx\n    repo: https://charts.bitnami.com/bitnami\n    version: 15.1.4\nEOF\n\n# Validate the manifest\ncapsailer init --manifest manifest.yaml\n\n# Build the bundle\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz\n</code></pre>"},{"location":"examples/#in-the-air-gapped-environment","title":"In the Air-Gapped Environment","text":"<pre><code># Deploy a registry\n./capsailer registry --namespace my-registry\n\n# Push all images from the bundle to the registry\n./capsailer push --bundle capsailer-bundle.tar.gz --namespace my-registry\n\n# Deploy applications using standard Helm commands\nkubectl port-forward -n my-registry svc/chartmuseum 8080:8080 &amp;\nhelm repo add local-charts http://localhost:8080\nhelm repo update\nhelm install my-redis local-charts/redis\n</code></pre>"},{"location":"examples/#using-values-files-with-charts","title":"Using Values Files with Charts","text":"<p>This example shows how to include values files with Helm charts.</p>"},{"location":"examples/#manifest-file_1","title":"Manifest File","text":"<pre><code># manifest.yaml\nimages:\n  - nginx:1.25\n  - redis:7.0\n\ncharts:\n  - name: redis\n    repo: https://charts.bitnami.com/bitnami\n    version: 17.11.7\n    valuesFile: redis-values.yaml\n  - name: nginx\n    repo: https://charts.bitnami.com/bitnami\n    version: 15.1.4\n    valuesFile: nginx-values.yaml\n</code></pre>"},{"location":"examples/#values-files","title":"Values Files","text":"<pre><code># redis-values.yaml\nmaster:\n  persistence:\n    size: 10Gi\nreplica:\n  replicaCount: 2\n</code></pre> <pre><code># nginx-values.yaml\nservice:\n  type: NodePort\nreplicaCount: 3\n</code></pre>"},{"location":"examples/#build-and-deploy","title":"Build and Deploy","text":"<pre><code># Build the bundle\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz\n\n# In the air-gapped environment\n./capsailer push --bundle capsailer-bundle.tar.gz --namespace my-registry\n\n# Deploy with values\nhelm install my-redis local-charts/redis -f redis-values.yaml\n</code></pre>"},{"location":"getting-started/","title":"Getting Started with Capsailer","text":"<p>This guide will help you get started with Capsailer for air-gapped Kubernetes deployments.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (for deployment)</li> <li>Admin access to the cluster</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#download-pre-built-binary","title":"Download Pre-built Binary","text":"<p>You can download pre-built binaries for your platform:</p>"},{"location":"getting-started/#linux-amd64","title":"Linux (amd64)","text":"<pre><code>curl -Lo capsailer https://github.com/capsailer/capsailer-cli/releases/latest/download/capsailer-linux-amd64.tar.gz\ntar -xzf capsailer-linux-amd64.tar.gz\nchmod +x capsailer\n</code></pre>"},{"location":"getting-started/#macos-intel","title":"macOS (Intel)","text":"<pre><code>curl -Lo capsailer https://github.com/capsailer/capsailer-cli/releases/latest/download/capsailer-darwin-amd64.tar.gz\ntar -xzf capsailer-darwin-amd64.tar.gz\nchmod +x capsailer\n</code></pre>"},{"location":"getting-started/#macos-apple-silicon","title":"macOS (Apple Silicon)","text":"<pre><code>curl -Lo capsailer https://github.com/capsailer/capsailer-cli/releases/latest/download/capsailer-darwin-arm64.tar.gz\ntar -xzf capsailer-darwin-arm64.tar.gz\nchmod +x capsailer\n</code></pre>"},{"location":"getting-started/#windows","title":"Windows","text":"<p>Download from https://github.com/capsailer/capsailer-cli/releases/latest</p>"},{"location":"getting-started/#move-to-path","title":"Move to PATH","text":"<pre><code>sudo mv capsailer /usr/local/bin/\n</code></pre> <p>You can find all available releases at: https://github.com/capsailer/capsailer-cli/releases</p>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":""},{"location":"getting-started/#1-create-a-manifest","title":"1. Create a Manifest","text":"<p>Create a manifest file that describes the images and charts you want to include:</p> <pre><code>images:\n  - nginx:1.25\n  - redis:7.0\n\ncharts:\n  - name: redis\n    repo: https://charts.bitnami.com/bitnami\n    version: 17.11.7\n</code></pre>"},{"location":"getting-started/#2-build-a-bundle","title":"2. Build a Bundle","text":"<pre><code>capsailer init --manifest manifest.yaml\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz\n</code></pre>"},{"location":"getting-started/#3-deploy-in-an-air-gapped-environment","title":"3. Deploy in an Air-Gapped Environment","text":"<pre><code># Deploy a registry\ncapsailer registry --namespace my-registry\n\n# Push all images from the bundle to the registry\ncapsailer push --bundle capsailer-bundle.tar.gz --namespace my-registry\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about creating manifests</li> <li>Explore the command reference</li> <li>Check out the examples </li> </ul>"},{"location":"commands/build/","title":"build","text":"<p>The <code>build</code> command downloads container images and Helm charts and packages them into a portable bundle.</p>"},{"location":"commands/build/#usage","title":"Usage","text":"<pre><code>capsailer build --manifest &lt;manifest-file&gt; --output &lt;output-file&gt;\n</code></pre>"},{"location":"commands/build/#description","title":"Description","text":"<p>The <code>build</code> command performs the following actions:</p> <ol> <li>Reads the manifest file</li> <li>Downloads all container images specified in the manifest</li> <li>Saves the images as OCI artifacts</li> <li>Downloads all Helm charts specified in the manifest</li> <li>Optionally rewrites image references in Helm charts to use a private registry</li> <li>Packages everything into a single, portable archive file</li> </ol>"},{"location":"commands/build/#options","title":"Options","text":"Option Description <code>--manifest</code> Path to the manifest file (required) <code>--output</code> Path to write the bundle file (required) <code>--rewrite-image-references</code> Rewrite image references in Helm charts to use a private registry <code>--registry-url</code> URL of the private registry to use when rewriting image references <code>--username</code> Username for authentication with private registries <code>--password</code> Password for authentication with private registries <code>--kubeconfig</code> Path to the kubeconfig file <code>--registry-url</code> URL of the registry to use for image pulls <code>--skip-tls-verify</code> Skip TLS verification when pulling images"},{"location":"commands/build/#examples","title":"Examples","text":"<pre><code># Build a bundle from a manifest\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz\n\n# Build a bundle with image reference rewriting\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz --rewrite-image-references --registry-url registry.local:5000\n\n# Build a bundle with authentication for private registries\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz --username myuser --password mypassword\n\n# Build a bundle with a specific kubeconfig\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz --kubeconfig /path/to/kubeconfig\n</code></pre>"},{"location":"commands/build/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 Failed to read manifest 2 Failed to download images 3 Failed to download charts 4 Failed to create bundle"},{"location":"commands/build/#see-also","title":"See Also","text":"<ul> <li>Building Bundles</li> <li>init</li> <li>push </li> </ul>"},{"location":"commands/init/","title":"init","text":"<p>The <code>init</code> command validates and normalizes a manifest file.</p>"},{"location":"commands/init/#usage","title":"Usage","text":"<pre><code>capsailer init --manifest &lt;manifest-file&gt;\n</code></pre>"},{"location":"commands/init/#description","title":"Description","text":"<p>The <code>init</code> command performs the following actions:</p> <ol> <li>Validates that the manifest file is properly formatted</li> <li>Checks that all required fields are present</li> <li>Normalizes image references (adds <code>latest</code> tag if missing)</li> <li>Validates that chart references are properly formatted</li> <li>Analyzes Helm charts for container image references</li> <li>Warns about potential missing images in the manifest</li> </ol>"},{"location":"commands/init/#image-reference-analysis","title":"Image Reference Analysis","text":"<p>When you run the <code>init</code> command with a manifest that includes Helm charts, Capsailer will provide information about the image reference rewriting feature and warn you about potential missing images. This helps ensure that all required images are included in your manifest.</p> <p>For example, if you have a Redis chart in your manifest but no Redis image, the <code>init</code> command will suggest adding the Redis image to your manifest.</p>"},{"location":"commands/init/#options","title":"Options","text":"Option Description <code>--manifest</code> Path to the manifest file (required) <code>--output</code> Path to write the normalized manifest (optional)"},{"location":"commands/init/#examples","title":"Examples","text":"<pre><code># Validate a manifest file\ncapsailer init --manifest manifest.yaml\n\n# Validate and write the normalized manifest to a new file\ncapsailer init --manifest manifest.yaml --output normalized-manifest.yaml\n</code></pre>"},{"location":"commands/init/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 Invalid manifest format 2 Missing required fields"},{"location":"commands/init/#see-also","title":"See Also","text":"<ul> <li>Creating Manifests</li> <li>build </li> </ul>"},{"location":"commands/overview/","title":"Command Reference","text":"<p>Capsailer provides several commands for managing container images and Helm charts in air-gapped environments.</p>"},{"location":"commands/overview/#available-commands","title":"Available Commands","text":"Command Description <code>init</code> Validate and normalize the manifest <code>build</code> Download and package images and charts <code>registry</code> Deploy a standalone Docker registry in a Kubernetes cluster <code>push</code> Push container images to the registry <code>unpack</code> Extract bundle and set up local registry"},{"location":"commands/overview/#global-flags","title":"Global Flags","text":"<p>These flags are available for all commands:</p> Flag Description <code>--help</code> Show help for the command <code>--kubeconfig</code> Path to the kubeconfig file <code>--namespace</code> Kubernetes namespace to use <code>--verbose</code> Enable verbose output"},{"location":"commands/overview/#command-usage","title":"Command Usage","text":"<p>Each command has its own set of flags and arguments. You can see the available options for a command by running:</p> <pre><code>capsailer [command] --help\n</code></pre>"},{"location":"commands/overview/#command-workflow","title":"Command Workflow","text":"<p>The typical workflow for using Capsailer commands is:</p> <ol> <li><code>init</code>: Validate your manifest file</li> <li><code>build</code>: Build a bundle from the manifest</li> <li><code>registry</code>: Deploy a registry in the air-gapped environment</li> <li><code>push</code>: Push artifacts from the bundle to the registry</li> </ol> <p>For more details on each command, see the individual command reference pages. </p>"},{"location":"commands/push/","title":"push","text":"<p>The <code>push</code> command uploads container images and Helm charts from a bundle to a registry.</p>"},{"location":"commands/push/#usage","title":"Usage","text":"<pre><code>capsailer push --bundle &lt;bundle-file&gt; [options]\n</code></pre>"},{"location":"commands/push/#description","title":"Description","text":"<p>The <code>push</code> command performs the following actions:</p> <ol> <li>Finds the registry service in the specified namespace (or uses the provided external registry)</li> <li>Sets up a Helm chart repository if needed (for internal registry only)</li> <li>Loads images from the bundle without requiring Docker or skopeo</li> <li>Pushes images directly to the registry using built-in container registry library</li> <li>Publishes Helm charts to the chart repository using direct HTTP API calls (for internal registry only)</li> </ol> <p>Unlike many similar tools, Capsailer doesn't rely on external dependencies like Docker or skopeo to push images and charts, making it truly self-contained and perfect for air-gapped environments.</p>"},{"location":"commands/push/#options","title":"Options","text":"Option Description <code>--bundle</code> Path to the bundle file or directory (required) <code>--namespace</code> Kubernetes namespace where the registry is deployed <code>--external-registry</code> URL of an external registry to push to <code>--username</code> Username for authentication with the registry <code>--password</code> Password for authentication with the registry <code>--kubeconfig</code> Path to the kubeconfig file <code>--skip-tls-verify</code> Skip TLS verification when pushing to the registry <code>--image</code> Push only a specific image from the bundle"},{"location":"commands/push/#examples","title":"Examples","text":"<pre><code># Push all images and charts from a bundle to the registry\ncapsailer push --bundle capsailer-bundle.tar.gz --namespace my-registry\n\n# Push artifacts from an unpacked bundle directory\ncapsailer push --bundle ./unpacked-bundle --namespace my-registry\n\n# Push to an external registry\ncapsailer push --bundle capsailer-bundle.tar.gz --external-registry artifactory.example.com --username myuser --password mypassword\n\n# Push a single image to the registry\ncapsailer push --image nginx:latest --namespace my-registry\n</code></pre>"},{"location":"commands/push/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 Failed to load bundle 2 Failed to find registry 3 Failed to push images 4 Failed to push charts"},{"location":"commands/push/#see-also","title":"See Also","text":"<ul> <li>Air-Gapped Deployment</li> <li>registry </li> </ul>"},{"location":"commands/registry/","title":"registry","text":"<p>The <code>registry</code> command deploys a standalone Docker registry and Helm chart repository in a Kubernetes cluster.</p>"},{"location":"commands/registry/#usage","title":"Usage","text":"<pre><code>capsailer registry [options]\n</code></pre>"},{"location":"commands/registry/#description","title":"Description","text":"<p>The <code>registry</code> command deploys:</p> <ol> <li>A Docker registry for container images</li> <li>A ChartMuseum instance for Helm charts</li> <li>Persistent storage for both services (optional)</li> </ol> <p>This provides a simple way to set up a local registry for your air-gapped deployments.</p>"},{"location":"commands/registry/#options","title":"Options","text":"Option Description <code>--namespace</code> Kubernetes namespace to deploy the registry in (default: <code>default</code>) <code>--image</code> Docker image to use for the registry (default: <code>registry:2</code>) <code>--persistent</code> Whether to use persistent storage (default: <code>true</code>) <code>--storage-class</code> Storage class to use for persistent volumes <code>--storage-size</code> Size of the persistent volumes (default: <code>10Gi</code>) <code>--kubeconfig</code> Path to the kubeconfig file <code>--port</code> Port to expose the registry on (default: <code>5000</code>) <code>--chart-port</code> Port to expose the chart repository on (default: <code>8080</code>)"},{"location":"commands/registry/#examples","title":"Examples","text":"<pre><code># Deploy a registry with default settings\ncapsailer registry\n\n# Deploy a registry in a specific namespace\ncapsailer registry --namespace my-registry\n\n# Deploy a registry with custom settings\ncapsailer registry --namespace my-registry --image registry:2.8 --persistent=false\n\n# Deploy a registry with a specific kubeconfig\ncapsailer registry --kubeconfig /path/to/kubeconfig\n</code></pre>"},{"location":"commands/registry/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 Failed to create namespace 2 Failed to deploy registry 3 Failed to deploy chart repository"},{"location":"commands/registry/#see-also","title":"See Also","text":"<ul> <li>Air-Gapped Deployment</li> <li>push</li> </ul>"},{"location":"commands/unpack/","title":"unpack","text":"<p>The <code>unpack</code> command extracts a bundle and sets up a local registry.</p>"},{"location":"commands/unpack/#usage","title":"Usage","text":"<pre><code>capsailer unpack --bundle &lt;bundle-file&gt; [options]\n</code></pre>"},{"location":"commands/unpack/#description","title":"Description","text":"<p>The <code>unpack</code> command performs the following actions:</p> <ol> <li>Extracts the bundle to a directory</li> <li>Sets up a local registry if requested</li> <li>Prepares the extracted artifacts for use</li> </ol> <p>This command is useful when you want to inspect the contents of a bundle or set up a local environment for testing.</p>"},{"location":"commands/unpack/#options","title":"Options","text":"Option Description <code>--bundle</code> Path to the bundle file (required) <code>--output</code> Directory to extract the bundle to (default: <code>./unpacked-bundle</code>) <code>--setup-registry</code> Whether to set up a local registry (default: <code>false</code>) <code>--registry-port</code> Port to expose the registry on (default: <code>5000</code>) <code>--chart-port</code> Port to expose the chart repository on (default: <code>8080</code>)"},{"location":"commands/unpack/#examples","title":"Examples","text":"<pre><code># Extract a bundle to the default directory\ncapsailer unpack --bundle capsailer-bundle.tar.gz\n\n# Extract a bundle to a specific directory\ncapsailer unpack --bundle capsailer-bundle.tar.gz --output ./my-bundle\n\n# Extract a bundle and set up a local registry\ncapsailer unpack --bundle capsailer-bundle.tar.gz --setup-registry\n\n# Extract a bundle and set up a local registry with custom ports\ncapsailer unpack --bundle capsailer-bundle.tar.gz --setup-registry --registry-port 5001 --chart-port 8081\n</code></pre>"},{"location":"commands/unpack/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 Failed to extract bundle 2 Failed to set up registry"},{"location":"commands/unpack/#see-also","title":"See Also","text":"<ul> <li>Building Bundles</li> <li>Air-Gapped Deployment </li> </ul>"},{"location":"user-guide/air-gapped-deployment/","title":"Air-Gapped Deployment","text":"<p>This guide explains how to deploy applications in an air-gapped (offline) Kubernetes environment using Capsailer.</p>"},{"location":"user-guide/air-gapped-deployment/#overview","title":"Overview","text":"<p>Deploying in an air-gapped environment involves three main steps:</p> <ol> <li>Transferring the bundle and Capsailer binary to the air-gapped environment</li> <li>Setting up a local registry and chart repository</li> <li>Pushing images and charts from the bundle to the registry</li> </ol>"},{"location":"user-guide/air-gapped-deployment/#rewriting-image-references","title":"Rewriting Image References","text":"<p>When deploying applications in air-gapped environments, you need to ensure that container image references in Helm charts point to your private registry. Capsailer provides a built-in feature to automatically rewrite these references during the build process:</p> <pre><code># Build a bundle with image reference rewriting\ncapsailer build --manifest manifest.yaml --output bundle.tar.gz --rewrite-image-references --registry-url registry.local:5000\n</code></pre> <p>This will: - Download all images and charts specified in the manifest - Rewrite all image references in Helm charts to use your private registry - Package everything into a portable bundle</p> <p>When you deploy these charts in your air-gapped environment, they will automatically use images from your private registry without requiring any manual modifications.</p>"},{"location":"user-guide/air-gapped-deployment/#handling-kubernetes-operators","title":"Handling Kubernetes Operators","text":"<p>Kubernetes operators often require special handling in air-gapped environments because:</p> <ol> <li>Operators typically reference container images in their Custom Resources (CRs)</li> <li>These image references need to be rewritten to point to your private registry</li> </ol>"},{"location":"user-guide/air-gapped-deployment/#operator-image-references-in-crs","title":"Operator Image References in CRs","text":"<p>When deploying operators, you'll often need to specify container images in the Custom Resource (CR) definitions. For example, a database operator might require you to specify the database image in its CR:</p> <pre><code>apiVersion: database.example.com/v1\nkind: Database\nmetadata:\n  name: my-database\nspec:\n  # Image reference that needs to be rewritten\n  image: docker.io/postgres:14.5\n  replicas: 3\n</code></pre>"},{"location":"user-guide/air-gapped-deployment/#strategies-for-handling-operators","title":"Strategies for Handling Operators","text":"<ol> <li> <p>Include Operator Images in Your Manifest:    Make sure to include all images required by the operator in your Capsailer manifest.</p> </li> <li> <p>Manually Update CRs:    After deploying the operator, update the image references in your CRs to point to your private registry:</p> </li> </ol> <pre><code>spec:\n  # Updated to use private registry\n  image: registry.local:5000/postgres:14.5\n</code></pre> <ol> <li>Use Helm Values for Operators:    If deploying operators via Helm, use values files to override image references:</li> </ol> <pre><code># values.yaml\noperator:\n  image: registry.local:5000/operator:v1.0.0\n\n# Images used by the operator's CRs\ndefaultImages:\n  postgres: registry.local:5000/postgres:14.5\n  redis: registry.local:5000/redis:7.0\n</code></pre> <ol> <li>Leverage Capsailer's Image Rewriting:    If your operator is deployed via a Helm chart that includes CR templates, Capsailer's image reference rewriting feature will automatically update those references.</li> </ol>"},{"location":"user-guide/air-gapped-deployment/#example-postgresql-operator","title":"Example: PostgreSQL Operator","text":"<pre><code># In your manifest.yaml\nimages:\n  - postgres:14.5\n  - postgres-operator:v1.10.0\n  # Any additional images the operator might need\n\ncharts:\n  - name: postgres-operator\n    repo: https://example.com/charts\n    version: 1.10.0\n</code></pre> <p>After deploying with Capsailer:</p> <pre><code># Deploy the operator\nhelm install postgres-operator local-charts/postgres-operator\n\n# Create a database CR with the rewritten image reference\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: database.example.com/v1\nkind: Database\nmetadata:\n  name: my-database\nspec:\n  image: registry.local:5000/postgres:14.5\n  replicas: 3\nEOF\n</code></pre>"},{"location":"user-guide/air-gapped-deployment/#transferring-the-bundle","title":"Transferring the Bundle","text":"<p>After building your bundle in a connected environment, you need to transfer it to the air-gapped environment:</p> <pre><code># Copy the bundle and the capsailer binary\nscp capsailer capsailer-bundle.tar.gz user@airgapped:~/\n</code></pre>"},{"location":"user-guide/air-gapped-deployment/#setting-up-a-registry","title":"Setting Up a Registry","text":"<p>In the air-gapped environment, you need to set up a local container registry and Helm chart repository:</p> <pre><code># Deploy a registry in the my-registry namespace\n./capsailer registry --namespace my-registry\n</code></pre> <p>This command deploys:</p> <ul> <li>A Docker registry for container images</li> <li>A ChartMuseum instance for Helm charts</li> <li>Persistent storage for both services (optional)</li> </ul>"},{"location":"user-guide/air-gapped-deployment/#pushing-artifacts","title":"Pushing Artifacts","text":"<p>Once the registry is set up, you can push all artifacts from your bundle to the registry:</p> <pre><code># Push all images and charts from the bundle to the registry\n./capsailer push --bundle capsailer-bundle.tar.gz --namespace my-registry\n</code></pre>"},{"location":"user-guide/air-gapped-deployment/#deploying-applications","title":"Deploying Applications","text":"<p>After pushing the artifacts, you can deploy applications using standard Helm commands:</p> <pre><code># First, add the ChartMuseum as a Helm repository\nkubectl port-forward -n my-registry svc/chartmuseum 8080:8080 &amp;\nhelm repo add local-charts http://localhost:8080\nhelm repo update\n\n# Now install charts\nhelm install my-release local-charts/nginx --values values.yaml\n</code></pre> <p>Since the image references in the charts have been rewritten during the build process (if you used the <code>--rewrite-image-references</code> flag), the deployed applications will automatically use images from your private registry.</p>"},{"location":"user-guide/air-gapped-deployment/#registry-options","title":"Registry Options","text":"<p>You can customize the registry deployment:</p> <pre><code># Deploy with custom settings\ncapsailer registry --namespace my-registry --image registry:2.8 --persistent=false\n</code></pre>"},{"location":"user-guide/air-gapped-deployment/#complete-workflow","title":"Complete Workflow","text":"<p>Here's the complete workflow for air-gapped deployments:</p> <ol> <li> <p>In the connected environment:    <pre><code># Create a manifest file with your images and charts\nvi manifest.yaml\n\n# Validate the manifest\ncapsailer init --manifest manifest.yaml\n\n# Build the bundle with image reference rewriting\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz --rewrite-image-references --registry-url registry.local:5000\n</code></pre></p> </li> <li> <p>Transfer to air-gapped environment:    <pre><code># Copy the bundle and the capsailer binary\nscp capsailer capsailer-bundle.tar.gz user@airgapped:~/\n</code></pre></p> </li> <li> <p>In the air-gapped environment:    <pre><code># Deploy a registry\n./capsailer registry --namespace my-registry\n\n# Push all images from the bundle to the registry\n./capsailer push --bundle capsailer-bundle.tar.gz --namespace my-registry\n\n# Deploy applications using standard Helm commands\nkubectl port-forward -n my-registry svc/chartmuseum 8080:8080 &amp;\nhelm repo add local-charts http://localhost:8080\nhelm repo update\nhelm install my-release local-charts/nginx\n</code></pre></p> </li> </ol>"},{"location":"user-guide/building-bundles/","title":"Building Bundles","text":"<p>Once you have created a manifest file, you can build a bundle that contains all the container images and Helm charts specified in the manifest.</p>"},{"location":"user-guide/building-bundles/#basic-bundle-creation","title":"Basic Bundle Creation","text":"<pre><code># First, validate your manifest\ncapsailer init --manifest manifest.yaml\n\n# Then build the bundle\ncapsailer build --manifest manifest.yaml --output capsailer-bundle.tar.gz\n</code></pre>"},{"location":"user-guide/building-bundles/#what-happens-during-the-build","title":"What Happens During the Build","text":"<p>When you run the <code>build</code> command, Capsailer:</p> <ol> <li>Downloads all container images specified in the manifest</li> <li>Saves the images as OCI artifacts</li> <li>Downloads all Helm charts specified in the manifest</li> <li>Optionally rewrites image references in Helm charts to use a private registry</li> <li>Packages everything into a single, portable archive file</li> </ol>"},{"location":"user-guide/building-bundles/#build-options","title":"Build Options","text":"<p>The <code>build</code> command supports several options:</p> <pre><code># Specify an output file\ncapsailer build --manifest manifest.yaml --output my-bundle.tar.gz\n\n# Use authentication for private registries\ncapsailer build --manifest manifest.yaml --username myuser --password mypassword\n\n# Use a specific kubeconfig file\ncapsailer build --manifest manifest.yaml --kubeconfig /path/to/kubeconfig\n</code></pre>"},{"location":"user-guide/building-bundles/#rewriting-image-references","title":"Rewriting Image References","text":"<p>For air-gapped deployments, you often need to rewrite container image references in Helm charts to point to your private registry. Capsailer can do this automatically during the build process:</p> <pre><code># Build a bundle with image reference rewriting\ncapsailer build --manifest manifest.yaml --output bundle.tar.gz --rewrite-image-references --registry-url registry.local:5000\n</code></pre> <p>This will: - Download all images and charts specified in the manifest - Rewrite all image references in Helm charts to use your private registry - Package everything into a portable bundle</p> <p>When you deploy these charts in your air-gapped environment, they will automatically use images from your private registry without requiring any manual modifications.</p>"},{"location":"user-guide/building-bundles/#including-operator-images","title":"Including Operator Images","text":"<p>When building bundles that include Kubernetes operators, you need to consider both the operator images themselves and the images referenced in the operator's Custom Resources (CRs):</p> <pre><code># Example manifest.yaml for an operator\nimages:\n  # The operator image itself\n  - quay.io/example/postgres-operator:v1.10.0\n\n  # Images that the operator will deploy via CRs\n  - docker.io/postgres:14.5\n  - docker.io/postgres:14.6\n  - docker.io/postgres-exporter:0.10.0\n\ncharts:\n  - name: postgres-operator\n    repo: https://example.com/charts\n    version: 1.10.0\n</code></pre>"},{"location":"user-guide/building-bundles/#tips-for-operator-bundles","title":"Tips for Operator Bundles","text":"<ol> <li> <p>Identify All Required Images: Review the operator documentation to identify all container images that might be deployed by the operator's CRs.</p> </li> <li> <p>Include Related Tools: Many operators deploy additional components like exporters, sidecars, or init containers. Make sure to include these images in your manifest.</p> </li> <li> <p>Version Consistency: Ensure that the versions of the operator and the images it deploys are compatible with each other.</p> </li> <li> <p>Check CR Templates: If the operator's Helm chart includes CR templates, Capsailer's image reference rewriting will automatically update those references.</p> </li> </ol>"},{"location":"user-guide/building-bundles/#bundle-contents","title":"Bundle Contents","text":"<p>A Capsailer bundle contains:</p> <ul> <li>Container images in OCI format</li> <li>Helm charts</li> <li>A copy of the manifest file</li> <li>Metadata about the bundle</li> </ul>"},{"location":"user-guide/building-bundles/#examining-a-bundle","title":"Examining a Bundle","text":"<p>You can examine the contents of a bundle without extracting it:</p> <pre><code>capsailer inspect --bundle capsailer-bundle.tar.gz\n</code></pre> <p>This will show you a list of all the images and charts included in the bundle.</p>"},{"location":"user-guide/building-bundles/#bundle-size-considerations","title":"Bundle Size Considerations","text":"<p>Bundle size depends on the number and size of the container images and Helm charts included. To keep bundle sizes manageable:</p> <ul> <li>Only include the specific images and charts you need</li> <li>Use specific tags rather than <code>latest</code> to avoid downloading unnecessary updates</li> <li>Consider using smaller base images when possible </li> </ul>"},{"location":"user-guide/creating-manifests/","title":"Creating Manifests","text":"<p>A manifest file is a YAML file that defines the container images and Helm charts you want to include in your bundle.</p>"},{"location":"user-guide/creating-manifests/#manifest-structure","title":"Manifest Structure","text":"<p>A basic manifest file looks like this:</p> <pre><code>images:\n  - nginx:1.25\n  - redis:7.0\n  - bitnami/postgresql:15.4.0\n\ncharts:\n  - name: redis\n    repo: https://charts.bitnami.com/bitnami\n    version: 17.11.7\n    valuesFile: redis-values.yaml\n  - name: nginx\n    repo: https://charts.bitnami.com/bitnami\n    version: 15.1.4\n</code></pre>"},{"location":"user-guide/creating-manifests/#images-section","title":"Images Section","text":"<p>The <code>images</code> section is a list of container images you want to include in your bundle. Each image is specified in the format <code>repository:tag</code>.</p> <pre><code>images:\n  - nginx:1.25           # Public Docker Hub image\n  - redis:7.0            # Public Docker Hub image\n  - bitnami/postgresql:15.4.0  # Public Docker Hub image with namespace\n  - registry.example.com/app:latest  # Private registry image\n</code></pre>"},{"location":"user-guide/creating-manifests/#charts-section","title":"Charts Section","text":"<p>The <code>charts</code> section is a list of Helm charts you want to include in your bundle. Each chart entry requires:</p> <ul> <li><code>name</code>: The name of the chart</li> <li><code>repo</code>: The URL of the Helm repository</li> <li><code>version</code>: The version of the chart to include</li> </ul> <p>Optionally, you can specify:</p> <ul> <li><code>valuesFile</code>: A path to a values file to include with the chart</li> </ul> <pre><code>charts:\n  - name: redis\n    repo: https://charts.bitnami.com/bitnami\n    version: 17.11.7\n    valuesFile: redis-values.yaml  # Optional\n  - name: nginx\n    repo: https://charts.bitnami.com/bitnami\n    version: 15.1.4\n</code></pre>"},{"location":"user-guide/creating-manifests/#validating-a-manifest","title":"Validating a Manifest","text":"<p>Before building a bundle, you can validate your manifest file using the <code>init</code> command:</p> <pre><code>capsailer init --manifest manifest.yaml\n</code></pre> <p>This will check that the manifest is properly formatted and that all required fields are present. </p>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>This guide covers different ways to install Capsailer.</p>"},{"location":"user-guide/installation/#pre-built-binaries","title":"Pre-built Binaries","text":"<p>The easiest way to install Capsailer is to download a pre-built release from the GitHub Releases page.</p>"},{"location":"user-guide/installation/#linux-amd64","title":"Linux (amd64)","text":"<pre><code># Download the binary\ncurl -Lo capsailer.tar.gz https://github.com/capsailer/capsailer-cli/releases/latest/download/capsailer-linux-amd64.tar.gz\ntar -xzf capsailer.tar.gz\nchmod +x capsailer\nsudo mv capsailer /usr/local/bin/\n</code></pre>"},{"location":"user-guide/installation/#linux-arm64","title":"Linux (arm64)","text":"<pre><code># Download the binary\ncurl -Lo capsailer.tar.gz https://github.com/capsailer/capsailer-cli/releases/latest/download/capsailer-linux-arm64.tar.gz\ntar -xzf capsailer.tar.gz\nchmod +x capsailer\nsudo mv capsailer /usr/local/bin/\n</code></pre>"},{"location":"user-guide/installation/#macos-intel","title":"macOS (Intel)","text":"<pre><code># Download the binary\ncurl -Lo capsailer.tar.gz https://github.com/capsailer/capsailer-cli/releases/latest/download/capsailer-darwin-amd64.tar.gz\ntar -xzf capsailer.tar.gz\nchmod +x capsailer\nsudo mv capsailer /usr/local/bin/\n</code></pre>"},{"location":"user-guide/installation/#macos-apple-silicon","title":"macOS (Apple Silicon)","text":"<pre><code># Download the binary\ncurl -Lo capsailer.tar.gz https://github.com/capsailer/capsailer-cli/releases/latest/download/capsailer-darwin-arm64.tar.gz\ntar -xzf capsailer.tar.gz\nchmod +x capsailer\nsudo mv capsailer /usr/local/bin/\n</code></pre>"},{"location":"user-guide/installation/#windows","title":"Windows","text":"<ol> <li>Download the Windows binary from the GitHub Releases page</li> <li>Extract the ZIP file</li> <li>Add the extracted directory to your PATH</li> </ol>"},{"location":"user-guide/installation/#building-from-source","title":"Building from Source","text":"<p>If you prefer to build from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/capsailer/capsailer-cli.git\ncd capsailer-cli\n\n# Build the binary\ngo build -o capsailer cmd/capsailer/main.go\n\n# Add to your PATH\nsudo mv capsailer /usr/local/bin/\n</code></pre>"},{"location":"user-guide/installation/#prerequisites","title":"Prerequisites","text":"<p>Capsailer requires:</p> <ul> <li>Kubernetes cluster (for deployment)</li> <li>Admin access to the cluster</li> <li>Go 1.20 or later (only if building from source)</li> </ul>"},{"location":"user-guide/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, verify that Capsailer is working correctly:</p> <pre><code>capsailer --version\n</code></pre> <p>You should see the current version of Capsailer displayed.</p>"},{"location":"user-guide/installation/#environment-setup","title":"Environment Setup","text":"<p>Capsailer uses your Kubernetes configuration by default. Make sure your <code>kubectl</code> is properly configured to connect to your cluster:</p> <pre><code>kubectl config current-context\n</code></pre> <p>If you need to use a specific kubeconfig file, you can specify it with the <code>--kubeconfig</code> flag:</p> <pre><code>capsailer registry --kubeconfig /path/to/kubeconfig\n</code></pre>"}]}